---
format: 
  revealjs:
    css: 'configuracao/painel.unidade.css'
    slide-number: c/t
    embed-resources: true
    auto-slide: 3000
    transition: slide
    transition-speed: fast
    background-transition: fade
    loop: true
    menu: false
    

params:
  Id: '3VCv'
---

```{r setup, include=FALSE}

## colocar símbolo de percentual
## formatação ptbr incluindo vírgula


endereco <-
  'dados/IndicadoresPainelUnidade.rds'

selecao <- c(params$Id, 'Limite')

indicadores <- readr::read_rds(endereco)

dados <- indicadores |> 
  dplyr::filter(Id %in% selecao)

unidade <- dados$Unidade[1]

criar.tabela <- function(tabela) {
  valor <- gsub(',', '.', tabela[1, ]) |>
    as.numeric()

  limite <- as.numeric(tabela[2, ])
  
  cor.fonte <- ifelse(valor > limite, 'blue', 'red')

  kableExtra::kable(
    tabela,
    align = 'c',
    escape = FALSE,
    col.names = NULL,
    row.names = FALSE
  ) |>
    kableExtra::kable_styling(font_size = '1.5em',
                              full_width = TRUE,
                              position = 'center') |>
    kableExtra::row_spec(0:nrow(tabela), extra_css = 'border-bottom: none;') |>
    kableExtra::row_spec(1, bold = T, font_size = '1.5em', color = cor.fonte) |>
    kableExtra::row_spec(2, bold = T, font_size = '.5em')
  
} 



```

# Painel da Unidade <br> `r unidade` {background-image="imagens/0.painel.unidade.png" background-opacity=".2"}

## `r unidade` <br> Meta 1 {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}
```{r}

indicador <- 'Meta1'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Julgar mais processos que os distribuídos

## `r unidade` <br> Meta 3 {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}
```{r}

indicador <- 'Meta3'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Estimular a conciliação

## `r unidade` <br> Taxa de Congestionamento Líquida {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}
```{r}

indicador <- 'TCL'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Relação entre casos novos e casos baixados

## `r unidade` <br> Processos Paralisados {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="50%"}
```{r}

indicador <- 'Parados30'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

::: {.column width="50%"}
```{r}

indicador <- 'Parados100'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::
:::

Quantidade de processos parados sem motivo legal

## `r unidade` <br> Índice de Audiências {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}

```{r}

indicador <- 'Audiencias'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Relação entre audiência marcadas e realizadas

## `r unidade` <br> Processos Antigos {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}

```{r}

indicador <- 'ProcessosAntigos'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Reduzir acervo de processos distribuídos até 2020

## `r unidade` <br> Tempo Médio de Tramitação {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}

```{r}

indicador <- 'TMT'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Tempo efetivo de duração dos processos pendentes

## `r unidade` <br> Tempo Médio de Conclusão {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}

```{r}

indicador <- 'TMC'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Tempo que o processo permanece aguardando solução

## `r unidade` <br> Índice de Atendimento à Demanda {background-image="imagens/1.TJRR.png" background-opacity=".2"}

::: {.columns}
::: {.column width="100%"}

```{r}

indicador <- 'IAD'

tabela <- dados[colnames(dados) == indicador]

criar.tabela(tabela)


```
:::

:::

Capacidade julgar a mesma quantidade de processos ingressados
